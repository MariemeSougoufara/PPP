import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.yellow600,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              8,
            ),
          ),
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateProperty.all<Color>(appTheme.yellow600),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.primary,
      ),
      textTheme: TextTheme(
        headlineLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            30,
          ),
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w600,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray400,
          fontSize: getFontSize(
            15,
          ),
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(
            27,
          ),
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(
            17,
          ),
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w600,
        ),
        bodyLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(
            17,
          ),
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: getFontSize(
            60,
          ),
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w900,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(
            15,
          ),
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray400,
          fontSize: getFontSize(
            13,
          ),
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w600,
        ),
        displaySmall: TextStyle(
          color: colorScheme.primary,
          fontSize: getFontSize(
            34,
          ),
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w700,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    onPrimary: Color(0XFF242E42),
    shadow: Color(0XFF242E42),
    onPrimaryContainer: Color(0XFF030303),
    onTertiary: Color(0XFF030303),
    scrim: Color(0XFF4A494A),
    primaryContainer: Color(0XFF4A494A),
    tertiaryContainer: Color(0XB0F6F6F6),
    secondaryContainer: Color(0XB0F6F6F6),
    error: Color(0XFF242E42),
    onErrorContainer: Color(0X4C191919),
    outline: Color(0XFF242E42),
    onSurfaceVariant: Color(0XFF242E42),
    onBackground: Color(0XFF030303),
    outlineVariant: Color(0XFF4A494A),
    errorContainer: Color(0XFF9B9A9B),
    onSurface: Color(0XFF030303),
    onError: Color(0XD1F8F8F8),
    surface: Color(0XFF4A494A),
    onInverseSurface: Color(0XD1F8F8F8),
    onSecondaryContainer: Color(0XFF242E42),
    tertiary: Color(0XFF4A494A),
    surfaceTint: Color(0XFF242E42),
    onTertiaryContainer: Color(0XFF242E42),
    surfaceVariant: Color(0XB0F6F6F6),
    inversePrimary: Color(0XFF4A494A),
    secondary: Color(0XFF4A494A),
    inverseSurface: Color(0XFF242E42),
    background: Color(0XFF4A494A),
    onSecondary: Color(0XFF030303),
    primary: Color(0XFFFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  Color get primaryVariant => Color(0XFF4A494A);
  Color get secondaryVariant => Color(0XB0F6F6F6);
  Color get gray400 => Color(0XFFC8C7CC);
  Color get amber300 => Color(0XFFFFC850);
  Color get gray300 => Color(0XFFDAD9E2);
  Color get greenA200 => Color(0XFF4CE5B1);
  Color get yellowA700 => Color(0XFFFFD300);
  Color get indigo900 => Color(0XFF113984);
  Color get pink500 => Color(0XFFF52C55);
  Color get blueGray100 => Color(0XFFD7D7D7);
  Color get gray900 => Color(0XFF262628);
  Color get blueGray50 => Color(0XFFF1F1F1);
  Color get gray200 => Color(0XFFEEEEEE);
  Color get indigoA400 => Color(0XFF4252FF);
  Color get gray50 => Color(0XFFFCFCFC);
  Color get blueGray5001 => Color(0XFFEFEFF4);
  Color get amberA400 => Color(0XFFFFCC00);
  Color get blueGray400 => Color(0XFF8A8A8F);
  Color get gray30001 => Color(0XFFE1E0E8);
  Color get gray40001 => Color(0XFFC1C0C8);
  Color get yellow600 => Color(0XFFFDDA38);
  Color get blueGray40001 => Color(0XFF888888);
  Color get blueGray5002 => Color(0XFFEEEEF1);
  Color get black900 => Color(0XFF000000);
  Color get blue700 => Color(0XFF2672CB);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
